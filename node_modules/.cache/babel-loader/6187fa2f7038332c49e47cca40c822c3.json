{"ast":null,"code":"import { Server, Model, belongsTo, hasMany, RestSerializer, Factory } from \"miragejs\";\nimport * as faker from 'faker';\nexport function makeServer() {\n  const server = new Server({\n    serializers: {\n      // application: JSONAPISerializer.extend({\n      //     alwaysIncludeLinkageData: false\n      // }),\n      todo: RestSerializer.extend({\n        serializeIds: \"always\"\n      }) // users: RestSerializer.extend({\n      //     include:[\"todo\"],\n      //     embed: true\n      // })\n\n    },\n    models: {\n      todo: Model.extend({\n        user: belongsTo()\n      }),\n      user: Model.extend({\n        todos: hasMany()\n      })\n    },\n    factories: {\n      user: Factory.extend({\n        id(i) {\n          return Number(i + 1);\n        },\n\n        firstName() {\n          return faker.name.firstName();\n        },\n\n        lastName() {\n          return faker.name.lastName();\n        }\n\n      }),\n      todo: Factory.extend({\n        name() {\n          return faker.random.words(faker.random.number(4) + 1);\n        },\n\n        isComplete: false\n      })\n    },\n\n    seeds(server) {\n      const users = server.createList(\"user\", 5);\n\n      for (const user of users) {\n        server.createList(\"todo\", faker.random.number(4), {\n          user: user\n        });\n      }\n    },\n\n    routes() {\n      this.namespace = \"api\";\n      this.get(\"/users\", schema => {\n        return schema.users.all();\n      });\n      this.get(\"/user/:id/todos\", (schema, request) => {\n        const userID = request.params.id;\n        const todos = schema.todos.where({\n          userID: userID\n        });\n        return {\n          todos: todos\n        };\n      }); // todo apis\n\n      this.get(\"/todos\", (schema, request) => {\n        const active = request.params.active;\n        console.log(active);\n        return schema.todos.all();\n      });\n      this.get(\"/todo/:id\", (schema, request) => {\n        const todoId = request.params.id;\n        const todo = schema.todos.find(todoId);\n        return {\n          todo: todo\n        };\n      });\n      this.delete(\"/todo/:id/delete\", (schema, request) => {\n        const todoId = request.params.id;\n        schema.todos.find(todoId).destroy();\n        return {\n          success: true\n        };\n      });\n      this.post(\"/todo/create\", (schema, request) => {\n        let attrs = JSON.parse(request.requestBody);\n        return schema.todos.create(attrs);\n      });\n    }\n\n  });\n  return server;\n}","map":{"version":3,"sources":["/Users/jayson/Linkedin Course/Blue Sky Digital Lab/InitiationTask/React/src/Server/server.ts"],"names":["Server","Model","belongsTo","hasMany","RestSerializer","Factory","faker","makeServer","server","serializers","todo","extend","serializeIds","models","user","todos","factories","id","i","Number","firstName","name","lastName","random","words","number","isComplete","seeds","users","createList","routes","namespace","get","schema","all","request","userID","params","where","active","console","log","todoId","find","delete","destroy","success","post","attrs","JSON","parse","requestBody","create"],"mappings":"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","sourcesContent":["import {\n    Server, \n    Model, \n    belongsTo, \n    hasMany, \n    RestSerializer, \n    Factory,\n    JSONAPISerializer,\n    Serializer,\n} from \"miragejs\"\nimport * as faker from 'faker';\nimport { serialize } from \"v8\";\n\n\n\n\nexport function makeServer () {\n    const server = new Server({\n        serializers: {\n            // application: JSONAPISerializer.extend({\n            //     alwaysIncludeLinkageData: false\n            // }),\n            todo: RestSerializer.extend({\n                serializeIds:\"always\",\n                \n            })\n            // users: RestSerializer.extend({\n            //     include:[\"todo\"],\n            //     embed: true\n            // })\n        },\n        models:{\n            todo:Model.extend({\n                user: belongsTo()\n            }),\n            user:Model.extend({\n                todos: hasMany()\n            })\n        },\n        factories: {\n            user: Factory.extend({\n                id(i:number){\n                    return Number(i+1)\n                },\n                firstName(){\n                    return faker.name.firstName()\n                },\n                lastName(){\n                    return faker.name.lastName()\n                }\n            }),\n            todo: Factory.extend({\n                name(){\n                    return faker.random.words(faker.random.number(4)+1)\n                },\n                isComplete: false\n            })\n        },\n        seeds(server){\n            const users = server.createList(\"user\", 5)\n            for(const user of users){\n                server.createList(\"todo\", faker.random.number(4), {user:user} as any)\n            }\n           \n        },\n        routes() {\n            this.namespace = \"api\"\n            this.get(\"/users\", (schema: any) => {\n                return schema.users.all()\n            })\n            this.get(\"/user/:id/todos\", (schema:any, request)=> {\n                const userID = request.params.id\n                const todos = schema.todos.where({userID: userID})\n                return {\n                    todos: todos\n                }\n            })\n\n\n            // todo apis\n            this.get(\"/todos\", (schema: any, request) => {\n                const active = request.params.active\n                console.log(active)\n                return schema.todos.all()\n            })\n            this.get(\"/todo/:id\", (schema:any, request)=>{\n                const todoId = request.params.id\n                const todo = schema.todos.find(todoId)\n                return {\n                    todo:todo\n                }\n            })\n            this.delete(\"/todo/:id/delete\", (schema:any, request)=> {\n                const todoId = request.params.id\n                schema.todos.find(todoId).destroy()\n                return {success:true}\n\n            })\n            this.post(\"/todo/create\", (schema:any,request)=>{\n                let attrs = JSON.parse(request.requestBody)\n                return schema.todos.create(attrs)\n            })\n\n\n        }\n    })\n    return server\n}"]},"metadata":{},"sourceType":"module"}